:root {
  --header-row-size: 2.5em; /* 1fr */
  /* --libnotify-row-size: 1.5em; */
  --libdetail-row-size: calc(100vh - var(--header-row-size));/* - var(--libnotify-row-size)); /* 11fr */
  --lib-col-size: 70%;
  --details-col-size: 30%;

  --navcontrols-top: calc(var(--header-row-size) / 2 - (var(--navcontrols-height) / 2));

  --openablepane-zindex: 200;
  --openablepane-width-factor: .7;
  --openablepane-height-factor: .8;
  --openablepane-width: calc(var(--openablepane-width-factor) * 100%);
  --openablepane-height: calc(var(--openablepane-height-factor) * 100%);
  --openablepane-maxwidth: 40em;
  --openablepane-minwidth: 28em;
  --openablepane-left: calc((100% - var(--openablepane-width)) / 2);
  --openablepane-top: calc((100% - var(--openablepane-height)) / 2);
  --openablepane-breakpt: calc(var(--openablepane-maxwidth) / var(--openablepane-width-factor));
}

#grid-container {
  grid-template:  "header  header"  var(--header-row-size)
                  "library details" var(--libdetail-row-size)
                  /* "library notify"  var(--libnotify-row-size) */
                / var(--lib-col-size) var(--details-col-size);
  justify-content: stretch;
  gap: 0px;
}

.pane {
  position:relative;
}

#nav-controls {
  position: absolute;
  top: var(--navcontrols-top);
  right: 0em;
  display:flex;
  flex-direction: row;
  flex-wrap: nowrap;
}

#nav-playlists {
  padding:0px;
  margin:0px;
  height:100%;
  /* width:var(--lib-col-size); */
  display: flex;
  flex-flow: row nowrap;
  justify-content: flex-start;
  align-items: flex-end;
}

.openable-pane {
  z-index: var(--openablepane-zindex);
  position: absolute;
  width: var(--openablepane-width);
  max-width: var(--openablepane-maxwidth);
  min-width: var(--openablepane-minwidth);
  min-height: var(--openablepane-height);
  top: var(--openablepane-top);
  left: var(--openablepane-left);
  /* transform: translateX(-50%); /* turns out we can't use translate because it screws up react-beautiful-dnd, so instead we have to use media queries to set the positioning */
  box-sizing: border-box;
}

/* the player pane doesn't need react-beautiful-dnd (so we can use transforms to center it),
   and it doesn't need any min or max height,
   as the height should be dictated by the aspect ratio of the video,
   along with the width */
.openable-pane#player-pane {
  /* picking 480px arbitrarily as the smallest we want any video to appear (at least until the browser window gets smaller than that) */
  --playerpane-minwidth: 480px;

  width: auto;
  height: auto;
  min-width: var(--playerpane-minwidth);
  max-width: 100%;
  min-height: 0;
  max-height: 100%;

  top: 50%;
  left: 50%;
  transform: translateX(-50%) translateY(-50%);
}
#video-player {
  min-width: var(--playerpane-minwidth);
  max-width: 100%;
  /* max-height: 100%; */
}
#video-container {
  max-width:100%;
  min-width: var(--playerpane-minwidth);
}
@media (max-width: 480px) { /* 480px == var(--playerpane-minwidth) */
  .openable-pane#player-pane,
  #video-container,
  #video-player {
    min-width: 0;
    width:100% !important;
  }
}

@media (min-width: 1524px) { /* 1524px = --openablepane-maxwidth (40em) / --openablepane-width-factor (.7) */
  .openable-pane {
    left: calc(50% - (var(--openablepane-maxwidth)/2));
  }
}
@media (max-width: 1067px) { /* 1067px = --openablepane-minwidth (28em) / --openablepane-width-factor (.7) */
  .openable-pane {
    left: calc(50% - (var(--openablepane-minwidth)/2));
  }
}
@media (max-width: 747px) { /* 747px = --openablepane-minwidth (28em) */
  .openable-pane {
    left: 0;
  }
  .openable-pane#player-pane {
    /* left: 0;
    transform: translateX(0%) translateY(-50%); */
  }
}

/* so that everything appears above the ::before element which obscures the background */
.openable-pane * {
  position: relative;
  z-index: calc(var(--openablepane-zindex) + 1);
}

.openable-close-btn {
  z-index: calc(var(--openablepane-zindex) + 2);
}

#editor-pane {
}

#edit-search {
  position:relative;
  z-index: calc(var(--openablepane-zindex) + 3);
}

/* transparent element to obscure the other panes in the background */
.openable-pane::before {
  content: "";
  z-index: calc(var(--openablepane-zindex) - 1);
  display: block;
  position: absolute;
  /* left: calc(1 / var(--openablepane-width-factor) * var(--openablepane-left) * -1); */
  /* top: calc(1 / var(--openablepane-height-factor) * var(--openablepane-top) * -1); */
  left: -100vw;
  top: -100vh;
  /* top: calc(var(--openablepane-top) * -1); */
  width: 200vw;
  height: 300vh;
}

#settings-tabs {
  /* width:var(--lib-col-size); */
  display:flex;
  flex-flow: row nowrap;
  justify-content: flex-start;
  align-items: flex-start;
}

#edit-container form {
  display:grid;
  grid-template-columns: 2fr 1fr 1fr minmax(5rem,1fr) minmax(5rem,1fr);
  grid-template-rows: repeat(14, auto);

  grid-gap: 0.5em;
}

/* @media (min-width: 1600px) {
  #edit-container form {
    column-gap: 1.5em;
  }
} */

#edit-container .edit-field {

}

/* column 1 */
.edit-field.title {
  grid-row: 1 / span 2;
  grid-column: 1 / span 3;
}
.edit-field.filename {
  grid-row: 3;
  grid-column: 1 / span 3;
}
.edit-field.description {
  grid-row: 4;
  grid-column: 1 / span 3;
}
.edit-field.series {
  grid-row: 5;
  grid-column: 1;
}
.edit-field.season {
  grid-row: 5;
  grid-column: 2;
}
.edit-field.episode {
  grid-row: 5;
  grid-column: 3;
}
.edit-field.year {
  grid-row: 6;
  grid-column: 1;
}
.edit-field.imdbID {
  grid-row: 6;
  grid-column: 2 / span 2;
}
.edit-field.director {
  grid-row: 7;
  grid-column: 1;
}
.edit-field.directorsort {
  grid-row: 7;
  grid-column: 2 / span 2;
}
.edit-field.genre {
  grid-row: 8;
  grid-column: 1;
}
.edit-field.kind {
  grid-row: 8;
  grid-column: 2 / span 2;
}
.edit-field.rated {
  grid-row: 9;
  grid-column: 1;
}
.edit-field.boxoffice {
  grid-row: 9;
  grid-column: 2 / span 2;
}
.edit-field.cast {
  grid-row: 10 / span 2;
  grid-column: 1 / span 3;
}
.edit-field.tags {
  grid-row: 12;
  grid-column: 1 / span 3;
}
.edit-field.subtitles {
  grid-row: 13;
  grid-column: 1 / span 3;
}
.edit-field.collections {
  grid-row: 14 / span 10;
  grid-column: 1 / span 3;
}

/* column 3 */
.edit-field.save-btn {
  grid-row: 1;
  grid-column: 4 / span 2;
}
.edit-field.revert-btn {
  grid-row: 2;
  grid-column: 4 / span 2;
}
.edit-field.artwork {
  grid-row: 3 / span 6;
  grid-column: 4 / span 2;
}
.edit-field.rating {
  grid-row: 9;
  grid-column: 4;
}
.edit-field.seen {
  grid-row: 9;
  grid-column: 5;
}
.edit-field.position {
  grid-row: 10;
  grid-column: 4 / span 2;
}
.edit-field.lastseen {
  grid-row: 11;
  grid-column: 4 / span 2;
}
.edit-field.dateadded {
  grid-row: 12;
  grid-column: 4 / span 2;
}
.edit-field.ratings {
  grid-row: 13;
  grid-column: 4 / span 2;
}
.edit-field.country {
  grid-row: 14;
  grid-column: 4 / span 2;
}
.edit-field.languages {
  grid-row: 15;
  grid-column: 4 / span 2;
}
.edit-field.new {
  grid-row: 16;
  grid-column: 4 / span 2;
}


#settings-preferences .sections-container {
  display:grid;
  grid-template-columns: 1fr 1fr;
  /* grid-template-rows: repeat(14, auto); */
  grid-gap: 0em;
}

#settings-prefs-cols {
  grid-row: 1;
  grid-column: 1 / span 2;
}

#settings-prefs-kinds {
  grid-row: 2 / span 3;
  grid-column: 1;
}

#settings-prefs-hidedescrip {
  grid-row: 2;
  grid-column: 2;
}

#settings-prefs-userratingavg {
  grid-row: 3;
  grid-column: 2;
}

#settings-prefs-includenew {
  grid-row: 4;
  grid-column: 2;
}

#settings-prefs-showdialogs {
  grid-row: 500;
  grid-column: 1 / span 2;
}
